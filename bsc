#!/usr/bin/ruby
# TODO test Ruby < 1.9


$input = ARGF.read.freeze
$i = 0


######################################################################## utils
def putc
  Kernel.putc(c)
ensure
  $i += 1
end

def prev
  j = $i - 1;
  $input[j..j]
end

def peek
  j = $i + 1;
  $input[j..j]
end

def whitespace_reverse
  begin
    $i -= 1
  end while c =~ /\s/
end

def whitespace_until_EOL #TODO is for loop more concise?
  j = $i + 1
  while j < $input.length
    return true if $input[j..j] == "\n"
    return false unless $input[j..j] =~ /\s/
    j += 1
  end
  return true # no more file left counts as EOL too!
end

def c
  $input[$i..$i]
end

def seek s
  until $input[$i..$i+s.length-1] == s or $i >= $input.length - s.length
    $i += 1
  end
end


################################################################### core logic
def tokenize
  while $i < $input.length
    case c
    when '/'
      putc
      while putc != "\n"; end if putc == '/'
      while putc != '*' and peek != '/'; end if putc == '*'
      next
    when "'"
      putc
      while putc != "'" and prev != '\\'; end
      next
    when '"'
      j = $i
      $i += 1
      if c == '"' and peek == '"'
        $i += 2
        begin seek('"""') end while prev == '\\'
        $i += 2
        yield :multi, $input[j..$i]
      else
        $i += 1 until c == '"' and prev != '\\'
        yield :string, $input[j..$i]
      end
    when '<'
      if peek =~ /[a-zA-Z]/
        opts = {:jQuerize => true}
        j = $i
        loop do
          $i += 1
          break if c == ';' and whitespace_until_EOL;
          if c == '<' and peek == '<';
            whitespace_reverse
            break
          end
        end
        yield :html, $input[j..$i], opts
      else
        print c
      end
    else
      print c
    end
    $i += 1
  end
end

class String
  def bsubst sep = '"'
    self.gsub(/#([nx]?)\{(.*?)\}/) do
      inner = case $1
      when 'n'
        "((#{$2}) || '')"
      when 'x'
        "encodeURIComponent(#{$2})"
      else
        "(#{$2})"
      end
      %Q{#{sep} + #{inner} + #{sep}}
    end
  end
end

#################################################################### main loop
tokenize do |type, string, opts|
  case type
  when :string
    print string.bsubst
  when :multi
    string = string[3..-4] # remove surrounding triple quotes
    string = string.gsub("'", "\\\\'")
    string = string.bsubst("'")
    string = string.gsub(/\s*\n(\s*)/m, %Q{\\n'+\n\\1'})
    print %Q{'#{string}'}
  when :html
    comma_terminated = string.end_with? ';'

    string = string.split(/(#[nx]?\{.*?\})/).map do |part|
      if part.start_with? '#'
        part.bsubst("'")
      else
        part.gsub(%{'}, %{\\\\'}) # escape quotes
      end
    end.join

    string.chop!.gsub!(/\s*\n(\s*)/m, %Q{'+\n\\1'}) if comma_terminated
    string = "'#{string}'"
    string = "$(#{string})" if opts[:jQuerize]
    string = "#{string};" if comma_terminated
    print string
  end
end
