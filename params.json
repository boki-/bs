{"name":"BullScript","tagline":"JavaScript with less bull.","body":"BullScript\r\n==========\r\nBullScript is yet another language that compiles to Javascript.\r\n\r\nWell actually not really. BullScript *is* Javascript. Javascript with a little\r\nsyntactic sugar to get rid of the rough edges. You still must write\r\nJavascript, you still must use curly-braces, you still must put paranthesis\r\naround your function parameters. But we have added a little sugar so that\r\nsome of the bigger pains in the language are much nicer.\r\n\r\nAt the end of your BullScript day, you are still writing Javascript, not\r\nsomething else that is “better”.\r\n\r\nAlpha Quality\r\n=============\r\nThe test-suite no doubt has holes. So you may have to fix some bugs if you use\r\nit at this stage. But, we’re actively developing BS, so hgopefully its quality\r\nwill rapidly improve.\r\n\r\nExamples\r\n========\r\nInline HTML\r\n-----------\r\n\r\n```js\r\n/** This bs: **/\r\n\r\nvar bar = <div class=\"abc\">\r\n            Hello <a href='#{href}'>#{name}</a>, sup?\r\n          </div>;\r\n\r\n/** Becomes this js: **/\r\n\r\nvar bar = $('<div class=\"abc\"> '+\r\n              'Hello <a href=\"' + href + '\">' + name + '</a>, sup? '+\r\n            '</div>');\r\n```\r\n\r\nIt’s time to stop writing your HTML5 applications across multiple files.\r\n\r\nVariable Substitution\r\n---------------------\r\n```js\r\n/** bs **/ var foo = \"Hello #{name}, ‘sup?\";\r\n/** js **/ var foo = \"Hello \" + name + \", ‘sup?\";\r\n```\r\n\r\nMultiline Strings\r\n-----------------\r\n\r\n```js\r\n  \"\"\"Line one\r\n     Line #{two}\r\n     Line three\"\"\"\r\n```\r\n\r\nBecomes:\r\n\r\n```js\r\n  \"Line one\\n\"+\r\n     \"Line \" + two + \"\\n\"+\r\n     \"Line three\"\r\n```\r\n\r\nFancy Escaping\r\n--------------\r\n```js\r\n/** bs **/ \"foo #n{bar} jee\"\r\n/** js* */ \"foo \" + (bar || '') + \" jee\"\r\n```\r\n\r\n```js\r\n/** bs **/ \"http://foo.com/#x{bar}/jee\"\r\n/** js **/ \"http://foo.com/\" + encodeURIComponent(bar) + \"/jee\"\r\n```\r\n\r\nIn fact there is more to this: they call through to bs.js so that the escapes\r\nare more useful. `#n{}` will output an empty string for `null` and\r\n`undefined`, while `#N{}` will do so for empty Arrays, Objects and anything\r\nthat is `falsy`. `#x{}` does “pretty” escaping, ie. `encodeURIComponent` but\r\nreplacing `%20`s with `+`s, while `#N{}` does *full* escaping, that is\r\n`encodeURIComponent` but it also encodes `!'()` which doesn’t hurt, but can\r\navoid certain categories of bug. If you want vanilla `encodeURIComponent` then\r\n(currently) you’ll have to call it yourself.\r\n\r\nUsing BullScript\r\n================\r\nCurrently we only have the compiler: `bsc`.\r\n\r\nUsing it in eg. Sinatra is thus (you will need to adapt paths):\r\n\r\n```rb\r\nget '/*.js' do |fn|\r\n  `./bsc #{fn}.js`\r\nend\r\n```\r\n\r\nAnd when deploying just adapt your build-system to compile `bs` to `js`, eg.\r\nfor `make` here’s an implicit rule you can use:\r\n\r\n```Makefile\r\n%.js: %.bs\r\n    ./bsc $< > $@\r\n```\r\n\r\nInline HTML Caveats\r\n===================\r\nYou have to cleanly terminate your HTML tags. This is how the parser\r\ndetermines where HTML ends. So if you start with a `<div>` end with a `</div>`.\r\nThough having said this, we understand tags like `<img>` too. Also you can do\r\nthis:\r\n\r\n```js\r\nvar a = <div>foo</div>\r\n        <b>blah</b>\r\nvar b = 2;\r\n```\r\n\r\nAdditionally, (currently) the parser will be confused by JavaScript of this\r\nkind:\r\n\r\n```js\r\nif (a <bc) { bar(); }\r\n```\r\n\r\nHeck, the above even breaks Sublime Text’s Markdown syntax highlighting.\r\n\r\n\r\nLicense\r\n=======\r\nI, Max Howell the copyright holder of this work, hereby release it into the\r\npublic domain. This applies worldwide.\r\n\r\nIn case this is not legally possible, I grant any entity the right to use this\r\nwork for any purpose, without any conditions, unless such conditions are\r\nrequired by law.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}